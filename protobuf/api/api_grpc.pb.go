// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: api.proto

package api

import (
	context "context"
	eth "github.com/chainbound/fiber-go/protobuf/eth"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	API_SubscribeNewTxs_FullMethodName              = "/api.API/SubscribeNewTxs"
	API_SubscribeNewTxsV2_FullMethodName            = "/api.API/SubscribeNewTxsV2"
	API_SubscribeNewBlobTxs_FullMethodName          = "/api.API/SubscribeNewBlobTxs"
	API_SendTransaction_FullMethodName              = "/api.API/SendTransaction"
	API_SendRawTransaction_FullMethodName           = "/api.API/SendRawTransaction"
	API_SendTransactionV2_FullMethodName            = "/api.API/SendTransactionV2"
	API_SendTransactionSequence_FullMethodName      = "/api.API/SendTransactionSequence"
	API_SendTransactionSequenceV2_FullMethodName    = "/api.API/SendTransactionSequenceV2"
	API_SendRawTransactionSequence_FullMethodName   = "/api.API/SendRawTransactionSequence"
	API_SubscribeExecutionPayloads_FullMethodName   = "/api.API/SubscribeExecutionPayloads"
	API_SubscribeExecutionPayloadsV2_FullMethodName = "/api.API/SubscribeExecutionPayloadsV2"
	API_SubscribeExecutionHeaders_FullMethodName    = "/api.API/SubscribeExecutionHeaders"
	API_SubscribeBeaconBlocks_FullMethodName        = "/api.API/SubscribeBeaconBlocks"
	API_SubscribeBeaconBlocksV2_FullMethodName      = "/api.API/SubscribeBeaconBlocksV2"
	API_SubmitBlockStream_FullMethodName            = "/api.API/SubmitBlockStream"
)

// APIClient is the client API for API service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type APIClient interface {
	// Opens a new transaction stream with the given filter.
	// TODO: Deprecate
	SubscribeNewTxs(ctx context.Context, in *TxFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.Transaction], error)
	// Opens a new transaction stream with the given filter.
	SubscribeNewTxsV2(ctx context.Context, in *TxFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionWithSenderMsg], error)
	// Opens a new blob transaction stream with the given filter.
	SubscribeNewBlobTxs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionWithSenderMsg], error)
	// Sends a signed transaction to the network.
	// TODO: Deprecate
	SendTransaction(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[eth.Transaction, TransactionResponse], error)
	// Sends a signed, RLP encoded transaction to the network
	// TODO: Deprecate
	SendRawTransaction(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RawTxMsg, TransactionResponse], error)
	SendTransactionV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransactionMsg, TransactionResponse], error)
	// Sends a sequence of signed transactions to the network.
	// TODO: Deprecate
	SendTransactionSequence(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TxSequenceMsg, TxSequenceResponse], error)
	SendTransactionSequenceV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TxSequenceMsgV2, TxSequenceResponse], error)
	// Sends a sequence of signed, RLP encoded transactions to the network.
	SendRawTransactionSequence(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RawTxSequenceMsg, TxSequenceResponse], error)
	// Opens a stream of new execution payloads.
	// TODO: Deprecate
	SubscribeExecutionPayloads(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.ExecutionPayload], error)
	SubscribeExecutionPayloadsV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecutionPayloadMsg], error)
	// Opens a stream of new execution payload headers.
	// TODO: Deprecate
	SubscribeExecutionHeaders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.ExecutionPayloadHeader], error)
	// Opens a stream of new beacon blocks. The beacon blocks are "compacted", meaning that the
	// execution payload is not included.
	SubscribeBeaconBlocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.CompactBeaconBlock], error)
	// Opens a stream of new beacon blocks.
	SubscribeBeaconBlocksV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BeaconBlockMsg], error)
	// Opens a bi-directional stream for new block submissions. The client stream is used to send
	// SSZ-encoded beacon blocks, and the server stream is used to send back the state_root, slot and
	// a local timestamp as a confirmation that the block was seen and handled.
	SubmitBlockStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BlockSubmissionMsg, BlockSubmissionResponse], error)
}

type aPIClient struct {
	cc grpc.ClientConnInterface
}

func NewAPIClient(cc grpc.ClientConnInterface) APIClient {
	return &aPIClient{cc}
}

func (c *aPIClient) SubscribeNewTxs(ctx context.Context, in *TxFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.Transaction], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[0], API_SubscribeNewTxs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxFilter, eth.Transaction]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeNewTxsClient = grpc.ServerStreamingClient[eth.Transaction]

func (c *aPIClient) SubscribeNewTxsV2(ctx context.Context, in *TxFilter, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionWithSenderMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[1], API_SubscribeNewTxsV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxFilter, TransactionWithSenderMsg]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeNewTxsV2Client = grpc.ServerStreamingClient[TransactionWithSenderMsg]

func (c *aPIClient) SubscribeNewBlobTxs(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[TransactionWithSenderMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[2], API_SubscribeNewBlobTxs_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, TransactionWithSenderMsg]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeNewBlobTxsClient = grpc.ServerStreamingClient[TransactionWithSenderMsg]

func (c *aPIClient) SendTransaction(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[eth.Transaction, TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[3], API_SendTransaction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[eth.Transaction, TransactionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionClient = grpc.BidiStreamingClient[eth.Transaction, TransactionResponse]

func (c *aPIClient) SendRawTransaction(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RawTxMsg, TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[4], API_SendRawTransaction_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RawTxMsg, TransactionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendRawTransactionClient = grpc.BidiStreamingClient[RawTxMsg, TransactionResponse]

func (c *aPIClient) SendTransactionV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TransactionMsg, TransactionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[5], API_SendTransactionV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TransactionMsg, TransactionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionV2Client = grpc.BidiStreamingClient[TransactionMsg, TransactionResponse]

func (c *aPIClient) SendTransactionSequence(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TxSequenceMsg, TxSequenceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[6], API_SendTransactionSequence_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxSequenceMsg, TxSequenceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionSequenceClient = grpc.BidiStreamingClient[TxSequenceMsg, TxSequenceResponse]

func (c *aPIClient) SendTransactionSequenceV2(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[TxSequenceMsgV2, TxSequenceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[7], API_SendTransactionSequenceV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[TxSequenceMsgV2, TxSequenceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionSequenceV2Client = grpc.BidiStreamingClient[TxSequenceMsgV2, TxSequenceResponse]

func (c *aPIClient) SendRawTransactionSequence(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[RawTxSequenceMsg, TxSequenceResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[8], API_SendRawTransactionSequence_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[RawTxSequenceMsg, TxSequenceResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendRawTransactionSequenceClient = grpc.BidiStreamingClient[RawTxSequenceMsg, TxSequenceResponse]

func (c *aPIClient) SubscribeExecutionPayloads(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.ExecutionPayload], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[9], API_SubscribeExecutionPayloads_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, eth.ExecutionPayload]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeExecutionPayloadsClient = grpc.ServerStreamingClient[eth.ExecutionPayload]

func (c *aPIClient) SubscribeExecutionPayloadsV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[ExecutionPayloadMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[10], API_SubscribeExecutionPayloadsV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, ExecutionPayloadMsg]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeExecutionPayloadsV2Client = grpc.ServerStreamingClient[ExecutionPayloadMsg]

func (c *aPIClient) SubscribeExecutionHeaders(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.ExecutionPayloadHeader], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[11], API_SubscribeExecutionHeaders_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, eth.ExecutionPayloadHeader]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeExecutionHeadersClient = grpc.ServerStreamingClient[eth.ExecutionPayloadHeader]

func (c *aPIClient) SubscribeBeaconBlocks(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[eth.CompactBeaconBlock], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[12], API_SubscribeBeaconBlocks_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, eth.CompactBeaconBlock]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeBeaconBlocksClient = grpc.ServerStreamingClient[eth.CompactBeaconBlock]

func (c *aPIClient) SubscribeBeaconBlocksV2(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[BeaconBlockMsg], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[13], API_SubscribeBeaconBlocksV2_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, BeaconBlockMsg]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeBeaconBlocksV2Client = grpc.ServerStreamingClient[BeaconBlockMsg]

func (c *aPIClient) SubmitBlockStream(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[BlockSubmissionMsg, BlockSubmissionResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &API_ServiceDesc.Streams[14], API_SubmitBlockStream_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[BlockSubmissionMsg, BlockSubmissionResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubmitBlockStreamClient = grpc.BidiStreamingClient[BlockSubmissionMsg, BlockSubmissionResponse]

// APIServer is the server API for API service.
// All implementations must embed UnimplementedAPIServer
// for forward compatibility.
type APIServer interface {
	// Opens a new transaction stream with the given filter.
	// TODO: Deprecate
	SubscribeNewTxs(*TxFilter, grpc.ServerStreamingServer[eth.Transaction]) error
	// Opens a new transaction stream with the given filter.
	SubscribeNewTxsV2(*TxFilter, grpc.ServerStreamingServer[TransactionWithSenderMsg]) error
	// Opens a new blob transaction stream with the given filter.
	SubscribeNewBlobTxs(*emptypb.Empty, grpc.ServerStreamingServer[TransactionWithSenderMsg]) error
	// Sends a signed transaction to the network.
	// TODO: Deprecate
	SendTransaction(grpc.BidiStreamingServer[eth.Transaction, TransactionResponse]) error
	// Sends a signed, RLP encoded transaction to the network
	// TODO: Deprecate
	SendRawTransaction(grpc.BidiStreamingServer[RawTxMsg, TransactionResponse]) error
	SendTransactionV2(grpc.BidiStreamingServer[TransactionMsg, TransactionResponse]) error
	// Sends a sequence of signed transactions to the network.
	// TODO: Deprecate
	SendTransactionSequence(grpc.BidiStreamingServer[TxSequenceMsg, TxSequenceResponse]) error
	SendTransactionSequenceV2(grpc.BidiStreamingServer[TxSequenceMsgV2, TxSequenceResponse]) error
	// Sends a sequence of signed, RLP encoded transactions to the network.
	SendRawTransactionSequence(grpc.BidiStreamingServer[RawTxSequenceMsg, TxSequenceResponse]) error
	// Opens a stream of new execution payloads.
	// TODO: Deprecate
	SubscribeExecutionPayloads(*emptypb.Empty, grpc.ServerStreamingServer[eth.ExecutionPayload]) error
	SubscribeExecutionPayloadsV2(*emptypb.Empty, grpc.ServerStreamingServer[ExecutionPayloadMsg]) error
	// Opens a stream of new execution payload headers.
	// TODO: Deprecate
	SubscribeExecutionHeaders(*emptypb.Empty, grpc.ServerStreamingServer[eth.ExecutionPayloadHeader]) error
	// Opens a stream of new beacon blocks. The beacon blocks are "compacted", meaning that the
	// execution payload is not included.
	SubscribeBeaconBlocks(*emptypb.Empty, grpc.ServerStreamingServer[eth.CompactBeaconBlock]) error
	// Opens a stream of new beacon blocks.
	SubscribeBeaconBlocksV2(*emptypb.Empty, grpc.ServerStreamingServer[BeaconBlockMsg]) error
	// Opens a bi-directional stream for new block submissions. The client stream is used to send
	// SSZ-encoded beacon blocks, and the server stream is used to send back the state_root, slot and
	// a local timestamp as a confirmation that the block was seen and handled.
	SubmitBlockStream(grpc.BidiStreamingServer[BlockSubmissionMsg, BlockSubmissionResponse]) error
	mustEmbedUnimplementedAPIServer()
}

// UnimplementedAPIServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAPIServer struct{}

func (UnimplementedAPIServer) SubscribeNewTxs(*TxFilter, grpc.ServerStreamingServer[eth.Transaction]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewTxs not implemented")
}
func (UnimplementedAPIServer) SubscribeNewTxsV2(*TxFilter, grpc.ServerStreamingServer[TransactionWithSenderMsg]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewTxsV2 not implemented")
}
func (UnimplementedAPIServer) SubscribeNewBlobTxs(*emptypb.Empty, grpc.ServerStreamingServer[TransactionWithSenderMsg]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeNewBlobTxs not implemented")
}
func (UnimplementedAPIServer) SendTransaction(grpc.BidiStreamingServer[eth.Transaction, TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedAPIServer) SendRawTransaction(grpc.BidiStreamingServer[RawTxMsg, TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendRawTransaction not implemented")
}
func (UnimplementedAPIServer) SendTransactionV2(grpc.BidiStreamingServer[TransactionMsg, TransactionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendTransactionV2 not implemented")
}
func (UnimplementedAPIServer) SendTransactionSequence(grpc.BidiStreamingServer[TxSequenceMsg, TxSequenceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendTransactionSequence not implemented")
}
func (UnimplementedAPIServer) SendTransactionSequenceV2(grpc.BidiStreamingServer[TxSequenceMsgV2, TxSequenceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendTransactionSequenceV2 not implemented")
}
func (UnimplementedAPIServer) SendRawTransactionSequence(grpc.BidiStreamingServer[RawTxSequenceMsg, TxSequenceResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendRawTransactionSequence not implemented")
}
func (UnimplementedAPIServer) SubscribeExecutionPayloads(*emptypb.Empty, grpc.ServerStreamingServer[eth.ExecutionPayload]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeExecutionPayloads not implemented")
}
func (UnimplementedAPIServer) SubscribeExecutionPayloadsV2(*emptypb.Empty, grpc.ServerStreamingServer[ExecutionPayloadMsg]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeExecutionPayloadsV2 not implemented")
}
func (UnimplementedAPIServer) SubscribeExecutionHeaders(*emptypb.Empty, grpc.ServerStreamingServer[eth.ExecutionPayloadHeader]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeExecutionHeaders not implemented")
}
func (UnimplementedAPIServer) SubscribeBeaconBlocks(*emptypb.Empty, grpc.ServerStreamingServer[eth.CompactBeaconBlock]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBeaconBlocks not implemented")
}
func (UnimplementedAPIServer) SubscribeBeaconBlocksV2(*emptypb.Empty, grpc.ServerStreamingServer[BeaconBlockMsg]) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeBeaconBlocksV2 not implemented")
}
func (UnimplementedAPIServer) SubmitBlockStream(grpc.BidiStreamingServer[BlockSubmissionMsg, BlockSubmissionResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SubmitBlockStream not implemented")
}
func (UnimplementedAPIServer) mustEmbedUnimplementedAPIServer() {}
func (UnimplementedAPIServer) testEmbeddedByValue()             {}

// UnsafeAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to APIServer will
// result in compilation errors.
type UnsafeAPIServer interface {
	mustEmbedUnimplementedAPIServer()
}

func RegisterAPIServer(s grpc.ServiceRegistrar, srv APIServer) {
	// If the following call pancis, it indicates UnimplementedAPIServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&API_ServiceDesc, srv)
}

func _API_SubscribeNewTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeNewTxs(m, &grpc.GenericServerStream[TxFilter, eth.Transaction]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeNewTxsServer = grpc.ServerStreamingServer[eth.Transaction]

func _API_SubscribeNewTxsV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(TxFilter)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeNewTxsV2(m, &grpc.GenericServerStream[TxFilter, TransactionWithSenderMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeNewTxsV2Server = grpc.ServerStreamingServer[TransactionWithSenderMsg]

func _API_SubscribeNewBlobTxs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeNewBlobTxs(m, &grpc.GenericServerStream[emptypb.Empty, TransactionWithSenderMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeNewBlobTxsServer = grpc.ServerStreamingServer[TransactionWithSenderMsg]

func _API_SendTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SendTransaction(&grpc.GenericServerStream[eth.Transaction, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionServer = grpc.BidiStreamingServer[eth.Transaction, TransactionResponse]

func _API_SendRawTransaction_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SendRawTransaction(&grpc.GenericServerStream[RawTxMsg, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendRawTransactionServer = grpc.BidiStreamingServer[RawTxMsg, TransactionResponse]

func _API_SendTransactionV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SendTransactionV2(&grpc.GenericServerStream[TransactionMsg, TransactionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionV2Server = grpc.BidiStreamingServer[TransactionMsg, TransactionResponse]

func _API_SendTransactionSequence_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SendTransactionSequence(&grpc.GenericServerStream[TxSequenceMsg, TxSequenceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionSequenceServer = grpc.BidiStreamingServer[TxSequenceMsg, TxSequenceResponse]

func _API_SendTransactionSequenceV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SendTransactionSequenceV2(&grpc.GenericServerStream[TxSequenceMsgV2, TxSequenceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendTransactionSequenceV2Server = grpc.BidiStreamingServer[TxSequenceMsgV2, TxSequenceResponse]

func _API_SendRawTransactionSequence_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SendRawTransactionSequence(&grpc.GenericServerStream[RawTxSequenceMsg, TxSequenceResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SendRawTransactionSequenceServer = grpc.BidiStreamingServer[RawTxSequenceMsg, TxSequenceResponse]

func _API_SubscribeExecutionPayloads_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeExecutionPayloads(m, &grpc.GenericServerStream[emptypb.Empty, eth.ExecutionPayload]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeExecutionPayloadsServer = grpc.ServerStreamingServer[eth.ExecutionPayload]

func _API_SubscribeExecutionPayloadsV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeExecutionPayloadsV2(m, &grpc.GenericServerStream[emptypb.Empty, ExecutionPayloadMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeExecutionPayloadsV2Server = grpc.ServerStreamingServer[ExecutionPayloadMsg]

func _API_SubscribeExecutionHeaders_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeExecutionHeaders(m, &grpc.GenericServerStream[emptypb.Empty, eth.ExecutionPayloadHeader]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeExecutionHeadersServer = grpc.ServerStreamingServer[eth.ExecutionPayloadHeader]

func _API_SubscribeBeaconBlocks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeBeaconBlocks(m, &grpc.GenericServerStream[emptypb.Empty, eth.CompactBeaconBlock]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeBeaconBlocksServer = grpc.ServerStreamingServer[eth.CompactBeaconBlock]

func _API_SubscribeBeaconBlocksV2_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(APIServer).SubscribeBeaconBlocksV2(m, &grpc.GenericServerStream[emptypb.Empty, BeaconBlockMsg]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubscribeBeaconBlocksV2Server = grpc.ServerStreamingServer[BeaconBlockMsg]

func _API_SubmitBlockStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(APIServer).SubmitBlockStream(&grpc.GenericServerStream[BlockSubmissionMsg, BlockSubmissionResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type API_SubmitBlockStreamServer = grpc.BidiStreamingServer[BlockSubmissionMsg, BlockSubmissionResponse]

// API_ServiceDesc is the grpc.ServiceDesc for API service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var API_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.API",
	HandlerType: (*APIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeNewTxs",
			Handler:       _API_SubscribeNewTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNewTxsV2",
			Handler:       _API_SubscribeNewTxsV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeNewBlobTxs",
			Handler:       _API_SubscribeNewBlobTxs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendTransaction",
			Handler:       _API_SendTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendRawTransaction",
			Handler:       _API_SendRawTransaction_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendTransactionV2",
			Handler:       _API_SendTransactionV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendTransactionSequence",
			Handler:       _API_SendTransactionSequence_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendTransactionSequenceV2",
			Handler:       _API_SendTransactionSequenceV2_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SendRawTransactionSequence",
			Handler:       _API_SendRawTransactionSequence_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "SubscribeExecutionPayloads",
			Handler:       _API_SubscribeExecutionPayloads_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeExecutionPayloadsV2",
			Handler:       _API_SubscribeExecutionPayloadsV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeExecutionHeaders",
			Handler:       _API_SubscribeExecutionHeaders_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBeaconBlocks",
			Handler:       _API_SubscribeBeaconBlocks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeBeaconBlocksV2",
			Handler:       _API_SubscribeBeaconBlocksV2_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubmitBlockStream",
			Handler:       _API_SubmitBlockStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api.proto",
}
